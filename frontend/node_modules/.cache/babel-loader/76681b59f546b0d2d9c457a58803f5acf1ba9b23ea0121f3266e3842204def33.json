{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Desktop/vsc/beatstore/frontend/src/components/BeatsDataContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BeatsContext = /*#__PURE__*/createContext();\nexport const DataProvider = ({\n  children\n}) => {\n  _s();\n  const [beatsJson, setBeatsJson] = useState([]);\n  useEffect(() => {\n    const getBeats = async () => {\n      try {\n        let response = await fetch('http://127.0.0.1:8000/api/beats/');\n        let data = await response.json();\n        setBeatsJson(data);\n      } catch (error) {\n        console.error('Error fetching beats data:', error);\n      }\n    };\n    getBeats();\n  }, []); // Empty dependency array ensures the effect runs only once on mount\n\n  return /*#__PURE__*/_jsxDEV(BeatsContext.Provider, {\n    value: beatsJson,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(DataProvider, \"dZNxiEQcYJT6/kIj3w6KFXM5zx4=\");\n_c = DataProvider;\nexport const useBeatsData = () => {\n  _s2();\n  return useContext(BeatsContext);\n};\n_s2(useBeatsData, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"DataProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","BeatsContext","DataProvider","children","_s","beatsJson","setBeatsJson","getBeats","response","fetch","data","json","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useBeatsData","_s2","$RefreshReg$"],"sources":["/Users/macbook/Desktop/vsc/beatstore/frontend/src/components/BeatsDataContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst BeatsContext = createContext();\n\nexport const DataProvider = ({ children }) => {\n  const [beatsJson, setBeatsJson] = useState([]);\n\n  useEffect(() => {\n    const getBeats = async () => {\n      try {\n        let response = await fetch('http://127.0.0.1:8000/api/beats/');\n        let data = await response.json();\n        setBeatsJson(data);\n      } catch (error) {\n        console.error('Error fetching beats data:', error);\n      }\n    };\n\n    getBeats();\n  }, []); // Empty dependency array ensures the effect runs only once on mount\n\n  return (\n    <BeatsContext.Provider value={beatsJson}>\n      {children}\n    </BeatsContext.Provider>\n  );\n};\n\nexport const useBeatsData = () => {\n  return useContext(BeatsContext);\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,YAAY,gBAAGN,aAAa,CAAC,CAAC;AAEpC,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACd,MAAMS,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACF,IAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,CAAC;QAC9D,IAAIC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAChCL,YAAY,CAACI,IAAI,CAAC;MACpB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;IACF,CAAC;IAEDL,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEP,OAAA,CAACC,YAAY,CAACa,QAAQ;IAACC,KAAK,EAAEV,SAAU;IAAAF,QAAA,EACrCA;EAAQ;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACf,EAAA,CAtBWF,YAAY;AAAAkB,EAAA,GAAZlB,YAAY;AAwBzB,OAAO,MAAMmB,YAAY,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAChC,OAAO1B,UAAU,CAACK,YAAY,CAAC;AACjC,CAAC;AAACqB,GAAA,CAFWD,YAAY;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}